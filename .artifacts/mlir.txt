module {
  func.func @inference_to_compile(%arg0: tensor<1x10x!FHE.esint<64>>) -> tensor<1x1x!FHE.esint<64>> {
    %cst = arith.constant dense<[[-2147483648], [-1639210473], [551906835], [-626201986], [-1892757416], [-1435193630], [2147483647], [-1728836369], [-1097917230], [-803095203]]> : tensor<10x1xi33>
    %0 = "FHELinalg.matmul_eint_int"(%arg0, %cst) : (tensor<1x10x!FHE.esint<64>>, tensor<10x1xi33>) -> tensor<1x1x!FHE.esint<64>>
    %1 = "FHELinalg.sum"(%arg0) {axes = [1], keep_dims = true} : (tensor<1x10x!FHE.esint<64>>) -> tensor<1x1x!FHE.esint<64>>
    %c-1751242843_i33 = arith.constant -1751242843 : i33
    %from_elements = tensor.from_elements %c-1751242843_i33 : tensor<1xi33>
    %2 = "FHELinalg.mul_eint_int"(%1, %from_elements) : (tensor<1x1x!FHE.esint<64>>, tensor<1xi33>) -> tensor<1x1x!FHE.esint<64>>
    %3 = "FHELinalg.to_unsigned"(%0) : (tensor<1x1x!FHE.esint<64>>) -> tensor<1x1x!FHE.eint<64>>
    %4 = "FHELinalg.to_unsigned"(%2) : (tensor<1x1x!FHE.esint<64>>) -> tensor<1x1x!FHE.eint<64>>
    %5 = "FHELinalg.sub_eint"(%3, %4) : (tensor<1x1x!FHE.eint<64>>, tensor<1x1x!FHE.eint<64>>) -> tensor<1x1x!FHE.eint<64>>
    %cst_0 = arith.constant dense<-8394059145009716224> : tensor<1x1xi65>
    %6 = "FHELinalg.to_signed"(%5) : (tensor<1x1x!FHE.eint<64>>) -> tensor<1x1x!FHE.esint<64>>
    %7 = "FHELinalg.add_eint_int"(%6, %cst_0) : (tensor<1x1x!FHE.esint<64>>, tensor<1x1xi65>) -> tensor<1x1x!FHE.esint<64>>
    return %7 : tensor<1x1x!FHE.esint<64>>
  }
}
